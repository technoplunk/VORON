# This file has been created by "Volcom" for the Voron 2.1 CoreXY
# printer.  X/Y/E steppers/endstops/thermisters/heaters
# are on one MCU/RAMPs board while Z steppers/mechanical switch/endstop_pin
# are on the seconds MCU/RAMPS labeled z . Please change settings for your
# specific build or ensure you place your items in the same spots on the same
# MCU as I have.  I've added as many options as I can think of for different
# displays as well as listed the available commands you can use via the 
# terminal at the bottom of this configuration file.

# THIS IS SETUP FOR A 350mm FRAME, YOU WILL HAVE TO CHANGE THINGS

#How do I upgrade to the latest software?
#The general way to upgrade is to ssh into the Raspberry Pi and run:
#cd ~/klipper
#git pull
#~/klipper/scripts/install-octopi.sh

#Then one can recompile and flash the micro-controller code. For example:
#make menuconfig
#make clean
#make
#sudo service klipper stop
#make flash FLASH_DEVICE=/dev/ttyACM0
#sudo service klipper start

#However, it's often the case that only the host software changes. In this case, one can update and restart just the host software with:
#cd ~/klipper
#git pull
#sudo service klipper restart
#If after using this shortcut the software warns about needing to reflash the micro-controller or some other unusual error occurs, then follow the full upgrade steps outlined above. Note that the RESTART and FIRMWARE_RESTART g-code commands do not load new software - the above "sudo service klipper restart" and "make flash" commands are needed for a software change to take effect.

#Pinouts for RAMPS 1.4
# X_STEP_PIN         ar54
# X_DIR_PIN          ar55
# X_ENABLE_PIN       ar38
# X_MIN_PIN          ar3
# X_MAX_PIN          ar2
# Y_STEP_PIN         ar60
# Y_DIR_PIN          ar61
# Y_ENABLE_PIN       ar56
# Y_MIN_PIN          ar14
# Y_MAX_PIN          ar15
# Z_STEP_PIN         ar46
# Z_DIR_PIN          ar48
# Z_ENABLE_PIN       ar62
# Z_MIN_PIN          ar18
# Z_MAX_PIN          ar19
# E0_STEP_PIN        ar26
# E0_DIR_PIN         ar28
# E0_ENABLE_PIN      ar24
# E1_STEP_PIN        ar36
# E1_DIR_PIN         ar34
# E1_ENABLE_PIN      ar30
# D10		         ar10
# D9         		 ar9
# D8    		     ar8
# TEMP_0_PIN         analog13
# TEMP_1_PIN         analog14
# TEMP_2_PIN		 analog15
# SERVO 1 (TOP)		 D11
# SERVO 2			 D6
# SERVO 3			 D5
# SERVO 4			 D4

# use the following modifiers before the pin definition (ex: ^!ar99)
# ! 			invert the logic
# ^ 			activate 5v pullup (does not apply to all pins)
# mcu_name: 	use pins on additional MCU (ex: z:ar10)

 
[mcu]
#	mcu_xye
#	mcu for X/Y/E steppers main MCU
#	obtain definition by "ls -l /dev/serial/by-path/" then unplug to verify
serial: /dev/serial/by-path/platform-3f980000.usb-usb-0:1.3:1.0-port0
pin_map: arduino
restart_method: arduino

[mcu z]
#	mcu_z
#	mcu for the Z steppers
#	obtain definition by "ls -l /dev/serial/by-path/" then unplug to verify
serial: /dev/serial/by-path/platform-3f980000.usb-usb-0:1.1.2:1.0-port0
pin_map: arduino
restart_method: arduino

[stepper_x]
#connected to X on mcu_xye (B Motor)
step_pin: ar54
dir_pin: ar55
enable_pin: !ar38
# 1.8 deg - 80 steps per mm - 1/16 microstepping
step_distance: 0.0125
# connected to xmax on mcu_xye
endstop_pin: ^ar2
position_min: 0
position_endstop: 350
position_max: 350
homing_speed: 100
homing_retract_dist: 5
homing_positive_dir: true
 
[stepper_y]
#connected to Y on mcu_xye (A Motor)
step_pin: ar60
dir_pin: ar61
enable_pin: !ar56
# 1.8 deg - 80 steps per mm - 1/16 microstepping
step_distance: 0.0125
# connected to ymax on mcu_xye
endstop_pin: ^ar15
position_min: 0
position_endstop: 350
position_max: 350
homing_speed: 100
homing_retract_dist: 5
homing_positive_dir: true
 
[stepper_z]
# connected to X on mcu_z (Front Left Stepper, from top)
step_pin: z:ar54
dir_pin: !z:ar55
enable_pin: !z:ar38
# 1.8deg - 400 steps per mm
step_distance: 0.00250
# connected to zmin on mcu_z
endstop_pin: ^z:ar18

# offset for nozzle to bed off z switch
# position_endstop: 1.07 ;Polycarbonate
position_endstop: 1.10 ;ABS
position_max: 300
position_min: -1
homing_speed: 15.0
second_homing_speed: 3.0
homing_retract_dist: 3.0
homing_positive_dir: false
 
[stepper_z1]
# connected to Y on mcu_z (Rear Left Stepper, from top)
step_pin: z:ar60
dir_pin: z:ar61
enable_pin: !z:ar56
# 1.8deg - 400 steps per mm
step_distance: 0.00250
 
[stepper_z2]
# connected to Z on mcu_z (Rear Right Stepper, from top)
step_pin: z:ar46
dir_pin: !z:ar48
enable_pin: !z:ar62
# 1.8deg - 400 steps per mm
step_distance: 0.00250
 
[stepper_z3]
# connected to E0 on mcu_z (Front Right Stepper, from top)
step_pin: z:ar26
dir_pin: z:ar28
enable_pin: !z:ar24
# 1.8deg - 400 steps per mm
step_distance: 0.00250

#	used to force a single stepper to move.  not used once setup
#[force_move]
#enable_force_move: true

# Probe
[probe]
# connected to zmax on mcu_z
pin: ^z:ar19
x_offset: 0.0
# offset for inductive probe y direction off nozzle
y_offset: 25.0
# offset for inductive probe in z height
z_offset: 0.00
speed: 2

#	this is required for gantry leveling and replaces your G28 command
#	with the gcode used here.  Used to home X/Y/Z with mechanical switches
[homing_override]
set_position_z: 0
gcode:
	G90
	G0 Z15 F600
	G28 X Y
#	For the FSR Switch
	G0 X339 Y344 F3000
	G28 Z
	G0 Z5 F3000
	G0 X330 Y330 Z20 F3000
 
#	gantry_level is to put a moving gantry into plan with
#	a fixed bed.  Must have 4 steppers on the gantry
[quad_gantry_level]
gantry_corners:
	-70.52,-21.06
	418.52,436.34
points:
	60,60
	60,290
	290,290
	290,60
speed: 100
horizontal_move_z: 10
samples: 1
sample_retract_dist: 2.0
 
[extruder]
# connected to E0 on mcu_xye
step_pin: ar26
dir_pin: !ar28
enable_pin: !ar24
# 1.8deg - 555 steps per mm - 1/16 microstepping -  M2
step_distance: 0.00177935943
nozzle_diameter: 0.400
	
# PA can be disabled by declaring a 0.0 value
pressure_advance: 0.07
# time seconds to look ahead for PA moves default is 0.010 or 10ms
pressure_advance_lookahead_time: 0.030
filament_diameter: 1.750
max_extrude_only_distance: 800.0

# connected to D10 on mcu_xye	
heater_pin: ar10
max_power: 1.0
sensor_type: NTC 100K beta 3950
# connected to T0 on mcu_xye
sensor_pin: analog13
smooth_time: 3.0
max_power: 1.0
control: pid
pid_Kp: 18.628
pid_Ki: 0.9
pid_Kd: 96.4
min_extrude_temp: 0
min_temp: 0
max_temp: 300

#	thermally controlled hotend fan
[heater_fan my_nozzle_fan]
# connected to D9 on mcu_z
pin: z:ar9
max_power: 1.0
kick_start_time: 0.500
heater: extruder
heater_temp: 50.0
fan_speed: 0.80

#	thermally controlled electronics bay cooling fans
[heater_fan electronics_bay]
# connected to D10 on mcu_z
pin: z:ar10
max_power: 1.0
kick_start_time: 0.500
heater: heater_bed
heater_temp: 40.0
fan_speed: 0.85

#	thermally controlled chamber exhaust
[heater_fan chamber_fan]
# connected to D8 on mcu_z
pin: z:ar8
max_power: 1.0
kick_start_time: 0.500
heater: heater_bed
heater_temp: 40.0
fan_speed: 0.85
 
#	bed heater configuration 
[heater_bed]
# connected to D11 (servo) on mcu_z
heater_pin: z:ar11
# NTC 100K MGB18-104F39050L32 is for Kenovo thermistors
sensor_type: NTC 100K MGB18-104F39050L32
# connected to T2 on mcu_z
sensor_pin: z:analog15
smooth_time: 3.0
max_power: 0.60
# PID for 90C
control: pid
pid_Kp=24.316
pid_Ki=0.180
pid_Kd=1070.006

min_temp: 0
max_temp: 110
 
# print cooling fan
[fan]
# connected to D9 on mcu_xye
pin: ar9
max_power: 1.0
kick_start_time: 0.500


[printer]
# settings below are the max and can't be commanded over in gcode
kinematics: corexy
max_velocity: 350
max_accel: 3000
max_z_velocity: 50
max_z_accel: 350
square_corner_velocity: 10.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm; corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The default is 5mm/s.

[idle_timeout]
# high motor off time so I don't have to relevel gantry often
timeout: 600000

	
#	 Macros

#	macro to level the gantry.  use G32 in the terminal to call
[gcode_macro g32]
gcode:
	G28
	quad_gantry_level
	nozzle_clean
	
#	macro to level the gantry.  use G32 in the terminal to call
[gcode_macro square_gantry_to_machine]
gcode:
	G28
	nozzle_clean
	quad_gantry_level
	G28
	quad_gantry_level
	nozzle_clean
	G28
		
#    Use print_start for the slicer starting script
#    change for your starting scripting needs
[gcode_macro print_start_1]
gcode:
	M104 S0 ;cancel set temp
	G21  ; set units to mm
	G90  ; use absolute coordinates
	T0  ; select tool 0
	G92 E0.0  ; reset e count
	M220 S100 ; reset speed multiplier

[gcode_macro print_start_2]
gcode:
	G32 				; autolevel with belts
	bed_mesh_calibrate	; mesh level the bed
	nozzle_clean		; clean nozzle
	
[gcode_macro print_start_3]
gcode:
	nozzle_clean		; clean nozzle	
	
#    Use print_end for you slicer ending script    
[gcode_macro print_end]
gcode:
	G91  							;relative positioning
	G1 E-5.00 F1000  				;retract 5mm of filament
	G1 Z+1.00 X-20.0 Y-20.0 F20000  ;short quick move to disengage from print
	G1 Z+10.00  F20000  			;move Z-Axis 10mm away from part

	G90  				;absolute positioning
	G1 X13 Y300  		; move gantry close to nozzle scrubber

	G91  				; relative positioning
	G1 E-8.00 F500  	;retract additional filament to prevent oozing

	G90 				;absolute positioning
	M104 S0  			;turn off hotend
	M140 S0  			;turn off heatbed
	M106 S0  			; shut off blower

#	Set Temps for ABS Warmup
[gcode_macro abs_warmup_temp]
gcode:
	M140 S90  ;set bed temperature and do not wait
	M109 S190  ;set print head temperature and wait

#	Set Temps for ABS Loading
[gcode_macro abs_loading_temp]
gcode:
	M140 S90  ;set bed temperature and do not wait
	M109 S235  ;set print head temperature and wait
   	
[gcode_macro nozzle_clean]
gcode:
	G1 Z6.80 F3000				;lift nozzle 25mm
	G1 X13 Y348 F7500			;move to nozzle scrubber
	G91 						;relative positioning
	G1 Z-3.50 F3000				;move nozzle to end of brush and into bristles
	G1 X+60.00 F6000			;scrub forwards once
	G1 X-60.00 F6000			;scrub backwards once
	G1 X+60.00 F6000			;scrub forwards once
	G1 X-60.00 F6000			;scrub backwards once
	G1 X+60.00 F6000			;scrub forwards once
	G1 X-60.00 F6000			;scrub backwards once
	G1 X+60.00 F6000			;scrub forwards once
	G1 X-60.00 F6000			;scrub backwards once
	G1 Z+10.00 F3000			;lift z 10mm
	G90							;absolute positioning
	G1 X13 Y300	F9000			;move nozzle away from brush
	
#	Macro to Babystep Up 0.02mm
[gcode_macro babystep_up]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=0.02

#	Macro to Babystep Down 0.02mm
[gcode_macro babystep_down]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=-0.02

# BED_MESH_CALIBRATE: Perform Mesh Bed Leveling
# BED_MESH_CLEAR: Clear the Mesh so no z-adjusment is made
# BED_MESH_MAP: Probe the bed and serialize output
# BED_MESH_OUTPUT: Retrieve interpolated grid of probed z-points
# FIRMWARE_RESTART: Restart firmware, host, and reload config
# G32       : G-Code macro
# QUAD_GANTRY_LEVEL: Conform a moving, twistable gantry to the shape of a stationary bed
# LOAD_FILAMENT: G-Code macro
# MENU      : Menu do things
# NOZZLE_CLEAN: G-Code macro
# PID_CALIBRATE: Run PID calibration test
# PRINT_END : G-Code macro
# PRINT_START: G-Code macro
# PROBE     : Probe Z-height at current XY position
# QUERY_ENDSTOPS: Report on the status of each endstop
# QUERY_PROBE: Return the status of the z-probe
# RESTART   : Reload config file and restart host software
# SET_GCODE_OFFSET: Set a virtual offset to g-code positions
# SET_PRESSURE_ADVANCE: Set pressure advance parameters
# SET_VELOCITY_LIMIT: Set printer velocity limits
# STATUS    : Report the printer status
# STEPPER_BUZZ: Oscillate a given stepper to help id it
# UNLOAD_FILAMENT: G-Code macro
# Z_TILT_ADJUST: Adjust the Z tilt