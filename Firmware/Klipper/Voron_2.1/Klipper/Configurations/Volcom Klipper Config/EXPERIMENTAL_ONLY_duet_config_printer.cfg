# This file has been created by "Volcom" for the Voron 2.1 CoreXY running a Duet Wifi Board with a Duex5
# Please change settings for your specific build or ensure you place your items in the same spots on the same MCU as I have.
# I've added as many options as I can think of for different displays as well as listed the available commands you can use via the terminal at the bottom of this configuration file.

#How do I upgrade to the latest software?
#The general way to upgrade is to ssh into the Raspberry Pi and run:
#cd ~/klipper
#git pull
#~/klipper/scripts/install-octopi.sh

#Then one can recompile and flash the micro-controller code. For example:
#make menuconfig
#make clean
#make
#sudo service klipper stop
#make flash FLASH_DEVICE=/dev/serial/by-id/ttyUSB0 (insert ID at end)
#sudo service klipper start

#However, it's often the case that only the host software changes. In this case, one can update and restart just the host software with:
#cd ~/klipper
#git pull
#sudo service klipper restart
#If after using this shortcut the software warns about needing to reflash the micro-controller or some other unusual error occurs, then follow the full upgrade steps outlined above. Note that the RESTART and FIRMWARE_RESTART g-code commands do not load new software - the above "sudo service klipper restart" and "make flash" commands are needed for a software change to take effect.

################################################################
#
# Duet specific install notes:
# Required hardware:
#
# - DuetWifi/DuetEthernet + likely a Duex board
# - Raspberry Pi 3 or higher
# - USB to TTL Serial adapter
# - microUSB cable
#
# In it's current state, aMpeX's Duet port for Klipper requires a USB to serial adapter connected to the Duet's PanelDue connection.
# This may go away in the future but for now is still needed.
# 
# 1) Follow the standard Klipper install instructions (see: https://github.com/KevinOConnor/klipper/blob/master/docs/Installation.md)
#    During setup choose "SAM4e8e (Duet Wifi/Eth)" for the architecture and keep the default baud rate of 250000.
#    Stop after the "make menuconfig" step.
# 
# 2) To flash for your duet, connect the microUSB cable from your Pi to your Duet. 
#     - Hold the "ERASE" button on the Duet board for two seconds followed by "RESET".
#	  - obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
#     - You should now be able to successfully run the flashing step:
#	 > make menuconfig
#	 > make clean
#	 > make
#	 > sudo service klipper stop
#	 > make flash FLASH_DEVICE=/dev/serial/by-id/ttyUSB0 (insert ID at end)
#	 > sudo service klipper start
#
# 3) Continue the Klipper install guide at step "Configuring OctoPrint to use Klipper"
# 4) Instead of using the "~/klipper/config/example.cfg" config in the guide, use this file instead.
# 5) Connect your USB to serial adapter to the Pi. 
#     !!WARNING!! Ensure the adapter is set to 3.3V or you can cause serious damage to your Duet board.
#    Then use the following image as reference
#    https://d17kynu4zpq5hy.cloudfront.net/igi/duet3d/YN2oahyGpcPNN1Pw.huge and make the following connections:
#        USB-Serial    Duet PanelDue port
#        GND           GND
#.       TX            URXD0
#        RX            UTXD0
# 6) Run "ls -l /dev/serial/by-id/" to find the ID of the USB-serial device. Find it and update the
# value in this file's [mcu] section for "serial".
# 7) In Octoprint go to the Terminal and execute command "RESTART" followed by "STATUS". 
# Either it will report that Klipper is ready or that you have problems to fix.
#
################################################################

# use the following modifiers before the pin definition (ex: ^!ar99)
# ! 			invert the logic
# ^ 			activate 5v pullup (does not apply to all pins)
# mcu_name: 	use pins on additional MCU (ex: z:ar10)


# MCU 
[mcu]
#	obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
serial: /dev/serial/by-id/usb-FTDI_FT232R_USB_UART_A100NF8Y-if00-port0
restart_method: command


# Steppers
[stepper_x]
# connected to X Stepper on Duet
step_pin: PD6
dir_pin: PD11
enable_pin: !PC6
# 0.9deg - 160 steps per mm - 1/16 microstepping
step_distance: 0.00625
endstop_pin: ^!PC14
position_min: 0
position_endstop: 350
position_max: 350
homing_speed: 80.0
second_homing_speed: 3.0
homing_retract_dist: 3.0
homing_positive_dir: true
 
[tmc2660 x_driver]
cs_pin: PD14
bus: 1
microsteps: 16
interpolate: True
run_current: 1.5
 
[stepper_y]
# connected to Y Stepper on Duet
step_pin: PD7
dir_pin: PD12
enable_pin: !PC6
# 0.9deg - 160 steps per mm - 1/16 microstepping
step_distance: 0.00625
endstop_pin: ^!PA2
position_min: 0
position_endstop: 350
position_max: 350
homing_speed: 80.0
second_homing_speed: 3.0
homing_retract_dist: 3.0
homing_positive_dir: true

[tmc2660 y_driver]
cs_pin: PC9
bus: 1
microsteps: 16
interpolate: True
run_current: 1.5
 
[stepper_z]
# connected to E2 Stepper on Duex(Front Left Stepper, from top)
step_pin: PD2
dir_pin: !PD28
enable_pin: !PC6
# 1.8deg - 400 steps per mm - 1/16 microstepping
step_distance: 0.00250
# connected to Z Endstop on Duet
endstop_pin: !PD29

# offset for nozzle to bed off z switch
# position_endstop: 5.51 ;Polycarbonate
position_endstop: 5.54 ;ABS
position_max: 300
position_min: -1
homing_speed: 15.0
second_homing_speed: 2.0
homing_retract_dist: 5.0
homing_positive_dir: false
 
[tmc2660 z_driver]
cs_pin: PD23
bus: 1
microsteps: 16
interpolate: True
run_current: 1.2
 
[stepper_z1]
# connected to E3 Stepper on Duex (Rear Left Stepper, from top)
step_pin: PD1
dir_pin: PD22
enable_pin: !PC6
# 1.8deg - 400 steps per mm - 1/16 microstepping
step_distance: 0.00250
 
[tmc2660 z1_driver]
cs_pin: PD24
bus: 1
microsteps: 16
interpolate: True
run_current: 1.2  
 
[stepper_z2]
# connected to E4 Stepper on Duex (Rear Right Stepper, from top)
step_pin: PD0
dir_pin: !PD16
enable_pin: !PC6
# 1.8deg - 400 steps per mm - 1/16 microstepping
step_distance: 0.00250

[tmc2660 z2_driver]
cs_pin: PD25
bus: 1
microsteps: 16
interpolate: True
run_current: 1.2 
 
[stepper_z3]
# connected to E5 Stepper on Duex (Front Right Stepper, from top)
step_pin: PD3
dir_pin: PD17
enable_pin: !PC6
# 1.8deg - 400 steps per mm - 1/16 microstepping
step_distance: 0.00250

[tmc2660 z3_driver]
cs_pin: PD26
bus: 1
microsteps: 16
interpolate: True
run_current: 1.2 


# Force Move
#	used to force a single stepper to move.  not used once setup
#[force_move]
#enable_force_move: true


# Probe
[probe]
# connected to E0 Endstop on Duet
pin: ^!PD10
x_offset: 0.0
# offset for inductive probe y direction off nozzle
y_offset: 25.0
# offset for inductive probe in z height
z_offset: 0.00
speed: 2
activate_gcode:
    G4 P500		;pause before probing
deactivate_gcode:
    G4 P500		;pause after probing


# Homing Override
#	this is required for gantry leveling and replaces your G28 command with the gcode used here.  Used to home X/Y/Z with mechanical switches
[homing_override]
gcode:
	G90
	G0 Z15 F600
	G28 X Y
#	For the FSR Switch
	G0 X340 Y337 F3000
	G4 P500 ;pause before probing
	G28 Z
	G0 Z15 F3000
	G0 X300 Y300 F3000
axes: z	
set_position_z: 0

# Extruder0
[extruder]
# conected to Extruder0 on Duet
step_pin: PD5
dir_pin: PA1
enable_pin: !PC6
# 1.8deg - 555 steps per mm - 1/16 microstepping -  Mobius2
step_distance: 0.00177935943
nozzle_diameter: 0.400
	
pressure_advance: 0.07
pressure_advance_lookahead_time: 0.030
filament_diameter: 1.750	
max_extrude_only_distance: 800.0

# connected to Heater1 on Duet
heater_pin: !PA20
max_power: 1.0
sensor_type: NTC 100K beta 3950
# connected to Thermistor1 on Duet
sensor_pin: PC15
smooth_time: 3.0
max_power: 1.0
control: pid
pid_Kp: 18.628
pid_Ki: 0.9
pid_Kd: 96.4
min_extrude_temp: 0
min_temp: 0
max_temp: 300

[verify_heater extruder]
hysteresis: 5
check_gain_time: 30
heating_gain: 2
max_error: 150

[tmc2660 extruder_driver]
cs_pin: PC17
bus: 1
microsteps: 16
interpolate: True
run_current: 1.5 
 
 
# Heated Bed  
[heater_bed]
# connected to Heater0 on Duet
heater_pin: !PA19
# NTC 100K MGB18-104F39050L32 is for Kenovo thermistors
sensor_type: NTC 100K MGB18-104F39050L32
#sensor_type: EPCOS 100K B57560G104F
#sensor_type: NTC 100K beta 3950
# connected to Thermistor0 on Duet
sensor_pin: PC13
smooth_time: 3.0
max_power: 0.60
# PID for 90C
control: pid
pid_Kp: 39.865 
pid_Ki: 1.591
pid_Kd: 249.654
min_temp: 0
max_temp: 110

[verify_heater heater_bed]
hysteresis: 2.5
check_gain_time: 240

 
# Fans  
#	thermally controlled hotend fan
[heater_fan my_nozzle_fan]
# connected to Fan0 on Duet
pin: PC23
max_power: 1.0
kick_start_time: 0.500
heater: extruder
heater_temp: 50.0
fan_speed: 0.80
 
# print cooling fan
[fan]
# connected to Fan1 on Duet
pin: PC26
max_power: 1.0
kick_start_time: 0.500


# Chamber Lighting
# (using thermostatic fan control to turn on and off)
[heater_fan chamber_lighting]
# connected to Heater3 on Duex
pin: !PC3
max_power: 1.0
kick_start_time: 0.500
heater: extruder
heater_temp: 100.0
fan_speed: 1.00


# Chamber Heater
[extruder1]
# conected to Extruder6 on Duex (would be direct drive stepper, dont plug anything into this)
step_pin: PD21
dir_pin: PA25
enable_pin: !PC6
step_distance: 0.1
nozzle_diameter: 0.400
	
pressure_advance: 0.07
pressure_advance_lookahead_time: 0.030
filament_diameter: 1.750	
max_extrude_only_distance: 1.0

# connected to Heater4 on Duex
heater_pin: !PC5
max_power: 1.0
sensor_type: NTC 100K beta 3950
# connected to Thermistor3 on Duex
sensor_pin: PC29
smooth_time: 3.0
max_power: 1.0
control: pid
pid_Kp: 10
pid_Ki: 1.5
pid_Kd: 1000
min_extrude_temp: 0
min_temp: 0
max_temp: 65

[verify_heater extruder1]
hysteresis: 1

[tmc2660 extruder1_driver]
cs_pin: PC28
bus: 1
microsteps: 16
interpolate: False
run_current: 0.1


#Printer Controls
[printer]
kinematics: corexy
max_velocity: 350
max_accel: 3000
max_z_velocity: 60
max_z_accel: 500
square_corner_velocity: 10.0


# Quad Gantry Level
[quad_gantry_level]
gantry_corners:
	-70.52,-21.06
	418.52,436.34
points:
	55,55
	55,295
	295,295
	295,55
speed: 200
horizontal_move_z: 5.0
samples: 3
sample_retract_dist: 5.0


# Motor Idle Timeout
[idle_timeout]
# high motor off time so I don't have to relevel gantry often
timeout: 6000

	
#	 Macros
#	macro to level the gantry.  use G32 in the terminal to call
[gcode_macro g32]
gcode:
	G28
	quad_gantry_level
	nozzle_clean
	
#	macro to level the gantry after initial startup.
[gcode_macro square_gantry_to_machine]
gcode:
	G28
	nozzle_clean
	quad_gantry_level
	G28 Z
	quad_gantry_level	
	nozzle_clean
	G28 Z
		
#    Use print_start for the slicer starting script, there are 3 sections to allow the slicer to set printer temperatures at specific regions.
[gcode_macro print_start_1]
gcode:
	M104 S0 ;cancel set temp
	G21  ; set units to mm
	G90  ; use absolute coordinates
	T0  ; select tool 0
	G92 E0.0  ; reset e count
	M220 S100 ; reset speed multiplier

[gcode_macro print_start_2]
gcode:
	G32 				; autolevel with belts
	
[gcode_macro print_start_3]
gcode:
	nozzle_clean		; clean nozzle	
	G28	Z				; home machine hot
	nozzle_clean		; clean nozzle
	
#    Use print_end for you slicer ending script    
[gcode_macro print_end]
gcode:
	G91  							;relative positioning
	G1 E-5.00 F1000  				;retract 5mm of filament
	G1 Z+1.00 X-20.0 Y-20.0 F20000  ;short quick move to disengage from print
	G1 Z+10.00  F20000  			;move Z-Axis 10mm away from part

	G90  				;absolute positioning
	G1 X175 Y300 		; move gantry close to nozzle scrubber

	G91  				; relative positioning
	G1 E-8.00 F500  	;retract additional filament to prevent oozing

	G90 				;absolute positioning
	M104 S0  			;turn off hotend
	M140 S0  			;turn off heatbed
	M106 S0  			; shut off blower

#	Set Temps for chamber warmup when printing with abs
[gcode_macro abs_warmup_temp]
gcode:
	G28							;home machine
	G1 X175 Y175 F6000			;move to nozzle scrubber
	M140 S100  					;set bed temperature and do not wait
	M109 S190  					;set print head temperature and wait

#	Set Temps for filament loading of ABS
[gcode_macro abs_loading_temp]
gcode:
	G28							;home machine
	G1 X175 Y175 F6000			;move to nozzle scrubber
	M140 S100  					;set bed temperature and do not wait
	M109 S235  					;set print head temperature and wait
	
#	Set Temps for chamber warmup when printing with PC
[gcode_macro PC_warmup_temp]
gcode:
	G28							;home machine
	G1 X175 Y175 F6000			;move to nozzle scrubber
	M140 S100  					;set bed temperature and do not wait
	M109 S190  					;set print head temperature and wait

#	Set Temps for filament loading of PC
[gcode_macro PC_loading_temp]
gcode:
	G28							;home machine
	G1 X175 Y175 F6000			;move to nozzle scrubber
	M140 S100  					;set bed temperature and do not wait
	M109 S275  					;set print head temperature and wait

#	Scrubs the nozzle on the brass brush located in the build chamber   	
[gcode_macro nozzle_clean]
gcode:
	G1 Z6.80 F3000				;lift nozzle
	G1 X13 Y348 F12000			;move to nozzle scrubber
	G91 						;relative positioning
	G1 Z-3.50 F3000				;move nozzle to end of brush and into bristles
	G1 X+60.00 F6000			;scrub forwards once
	G1 X-60.00 F6000			;scrub backwards once
	G1 X+60.00 F6000			;scrub forwards once
	G1 X-60.00 F6000			;scrub backwards once
	G1 X+60.00 F6000			;scrub forwards once
	G1 X-60.00 F6000			;scrub backwards once
	G1 X+60.00 F6000			;scrub forwards once
	G1 X-60.00 F6000			;scrub backwards once
	G1 Z+10.00 F3000			;lift z 10mm
	G90							;absolute positioning
	G1 X13 Y300	F9000			;move nozzle away from brush
	
#	Macro to Babystep Up 0.02mm
[gcode_macro babystep_up]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=0.02

#	Macro to Babystep Down 0.02mm
[gcode_macro babystep_down]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=-0.02
	
#	Macro to Babystep Up 0.05mm
[gcode_macro babystep_up2]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=0.05

#	Macro to Babystep Down 0.05mm
[gcode_macro babystep_down2]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=-0.05

# BED_MESH_CALIBRATE: Perform Mesh Bed Leveling
# BED_MESH_CLEAR: Clear the Mesh so no z-adjusment is made
# BED_MESH_MAP: Probe the bed and serialize output
# BED_MESH_OUTPUT: Retrieve interpolated grid of probed z-points
# FIRMWARE_RESTART: Restart firmware, host, and reload config
# G32       : G-Code macro
# QUAD_GANTRY_LEVEL: Conform a moving, twistable gantry to the shape of a stationary bed
# LOAD_FILAMENT: G-Code macro
# MENU      : Menu do things
# NOZZLE_CLEAN: G-Code macro
# PID_CALIBRATE: Run PID calibration test
# PRINT_END : G-Code macro
# PRINT_START: G-Code macro
# PROBE     : Probe Z-height at current XY position
# QUERY_ENDSTOPS: Report on the status of each endstop
# QUERY_PROBE: Return the status of the z-probe
# RESTART   : Reload config file and restart host software
# SET_GCODE_OFFSET: Set a virtual offset to g-code positions
# SET_PRESSURE_ADVANCE: Set pressure advance parameters
# SET_VELOCITY_LIMIT: Set printer velocity limits
# STATUS    : Report the printer status
# STEPPER_BUZZ: Oscillate a given stepper to help id it
# UNLOAD_FILAMENT: G-Code macro
# Z_TILT_ADJUST: Adjust the Z tilt